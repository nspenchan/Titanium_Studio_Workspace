//FirstView Component Constructor
function Template(win, title, bgColor, speech0, arrayPurchase, arrayCorrect, arrayCorrect2, arrayNewWord, arrayNewWord2, arrayImages2, arrayImages3, changeHiragana, textField, cursorImage, questionImage, adView) {
	if(Ti.Platform.locale=='ja'){
		var speechLang = 'ja-JP';
	}else{
		var speechLang = 'en-US';
	}
	var height = Ti.Platform.displayCaps.platformHeight;
	var width = Ti.Platform.displayCaps.platformWidth;
	var arrayTemplate = ['mojiban', 'mojiban1'];
	var numArray = arrayTemplate.length;
	
	//create object instance, a parasitic subclass of Observable
	var self = Ti.UI.createView({
		backgroundColor:bgColor,
	});
	
	function scale1(dimension) {
		return Math.round(dimension *  height / 768);
	}
	
	var scrollView = Titanium.UI.createScrollView({
		contentWidth:767*numArray+100,
		contentHeight:768,
		top:0,
		bottom: 0,
		showVerticalScrollIndicator:true,
		showHorizontalScrollIndicator:true
	});
	/*
	var imageView = Ti.UI.createImageView({
		// http://ja.wikipedia.org/wiki/ %E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB:Tokyo_metro_map.png
		//image: 'Tokyo_metro_map.png',
		backgroundColor:'#000',
		width:767*numArray+100,
		height:768,
	});
	*/
	//test
	//Titanium.App.Properties.setBool('Purchased-mojiban1', true);
	
	scrollView.addEventListener('click', function(e){
		if(arrayPurchase.indexOf(e.source.template)==-1 && e.source.template!='mojiban'){
			alert(L('now_preparing'));
			speech0.startSpeaking({
				text:L('now_preparing'),
				voice:speechLang,
				rate:0.1,
			});
		}else if(Titanium.App.Properties.getBool(e.source.val)){
			if(e.source.template!=Titanium.App.Properties.getString('template')){
				alert(L('template_change'));
				speech0.startSpeaking({
					text:L('template_change3'),
					voice:speechLang,
					rate:0.1,
				});
				Titanium.App.Properties.setString('template', e.source.template);
				db = Ti.Database.open(Titanium.App.Properties.getString('template'));
				select = 'SELECT word, newword, hiragana FROM ' + e.source.template;
				//Ti.API.info(select);
				data = db.execute(select);
				k = 0;
				i = 0;
				while(data.isValidRow()){
					//Ti.API.info(k + '/' + data.field(0) + '/' + data.field(1) + '/' + data.field(2));
					j = k%5;
					arrayImages3[j] = data.field(0);
					arrayCorrect2[j] = data.field(2);
					arrayNewWord2[j] = data.field(1);
					if(j%5==4){
						//Ti.API.info(arrayImages3);
						Ti.API.info(arrayNewWord2);
						arrayImages2[i] = arrayImages3;
						arrayCorrect[i] = arrayCorrect2;
						arrayNewWord[i] = arrayNewWord2;
						arrayImages3 = [];
						arrayCorrect2 = [];
						arrayNewWord2 = [];
						i++;
						Ti.API.info(arrayNewWord);
					}
					//setTimeout(function(){
						data.next();
					//}, 100);
					k++;
				}
				data.close();
				db.close();
				arrayImages3 = [];
				arrayCorrect2 = [];
				arrayNewWord2 = [];
				changeHiragana('settings');
				setTimeout(function(){
					win.remove(self);
				}, 3000);
			}
		}else{
			//alert(L('buy_now'));
			speech0.startSpeaking({
				text:L('buy_now2'),
				voice:speechLang,
				rate:0.1,
			});
		alertDialog = Titanium.UI.createAlertDialog({
			title: L('buy_now'),
			message: L('buy_now2'),
			buttonNames: [L('OK'),L('Cancel')],
				// キャンセルボタンがある場合、何番目(0オリジン)のボタンなのかを指定できます。
				cancel: 1
			});
		alertDialog.addEventListener('click',function(event){
			// Cancelボタンが押されたかどうか
			if(event.index == 1){
				// cancel時の処理
				win.remove(self);
			}
			// 選択されたボタンのindexも返る
			if(event.index == 0){
				// "OK"時の処理
				win.remove(self);
				Store = require('ui/common/Store');
				//construct UI
				store = new Store(win, 'Store', 'blue', arrayPurchase, textField, cursorImage, questionImage, adView);
				win.add(store);
			}
		});
		alertDialog.show();
		}
		setTimeout(function(){
			//win.remove(self);
		}, 2000);
	});
	//scrollView.add(imageView);
	scrollView.scrollTo(0, 0);
	self.add(scrollView);
	
	
	for(i=0; i<numArray; i++){
		templateImage = Ti.UI.createLabel({
			// http://ja.wikipedia.org/wiki/ %E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB:Tokyo_metro_map.png
			//image: 'Tokyo_metro_map.png',
			backgroundImage:'/assets/images/' + arrayTemplate[i] + '.png',
			top:134,
			left:100 + 767*i,
			width:667,
			height:500,
			borderColor:'#000',
			borderWidth:2,
			val:'Purchased-'+ arrayTemplate[i],
			template:arrayTemplate[i],
		});
		scrollView.add(templateImage);
		/*
		if(!Titanium.App.Properties.getBool(arrayTemplate[i])){
			templateImage.opacity = 0.2;
		}
		*/
		
		if(Titanium.App.Properties.getString('template')==arrayTemplate[i]){
			templateImage.borderColor = 'red';
			templateImage.borderWidth = 15;
		}
		
		templateLabel  = Ti.UI.createLabel({
			color:'#fff',
			backgroundColor:'transparent',
			text:L(arrayTemplate[i]),
			font:{fontSize:30,fontFamily:'Helvetica Neue',fontWeight:'bold'},
			width:667,
			height:50,
			bottom:50,
			left:100 + 767*i,
			textAlign:'center',
		});
		scrollView.add(templateLabel);
	}
	
	//label using localization-ready strings from <app dir>/i18n/en/strings.xml
	var label = Ti.UI.createLabel({
		color:'#fff',
		backgroundColor:'transparent',
		text:L(title),
		font:{fontSize:40,fontFamily:'Helvetica Neue',fontWeight:'bold'},
		width:524,
		height:50,
		top:50,
		left:250,
		textAlign:'center',
	});
	self.add(label);
	
	//label using localization-ready strings from <app dir>/i18n/en/strings.xml
	var back = Ti.UI.createButton({
		backgroundImage:'/assets/images/Undo.png',
		height:50,
		width:50,
		top:5,
		left:10,
		opacity:0.5,
	});
	self.add(back);
	//Add behavior for UI
	back.addEventListener('click', function(e) {
		win.remove(self);
	});
	
	return self;
	
	setTimeout(function(){
		speech0.startSpeaking({
			text:L('template_change2'),
			voice:speechLang,
			rate:0.1,
		});
	}, 1000);
	/*coverFlowViewのテスト
	// 表示対象の画像は配列として渡します
	var images = [
		'/assets/images/sample00.png',
		'/assets/images/sample01.png',
		'/assets/images/sample02.png'
	];
	var imagePaths = [];  
	for(var i=0,j=images.length; i<j; i++){  
		imagePaths.push({
			image: images[i],
			height: "20%",
			width: "20%"
		});
	};
	// 背景色とセットで画像一覧を引き渡します
	var view = Titanium.UI.iOS.createCoverFlowView({
		images: imagePaths,
		backgroundColor: '#000',
		//height:height,
		//width:width,
	});
	
	// 画像選択時のイベント
	view.addEventListener('click',function(e){
		Titanium.API.info('image clicked: ' + e.index + ', selected is ' + view.selected);  
	});
	
	// フリックなどで選択中の画像が変わったときのイベント
	view.addEventListener('change',function(e){
		Titanium.API.info('現在の画像: ' + e.index + ', 直近の画像: ' + view.selected);       
	});
	
	self.add(view);
	*/
	return self;
}

module.exports = Template;
